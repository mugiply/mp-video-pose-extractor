import { POSE_LANDMARKS } from '@mediapipe/holistic';
import * as JSZip from 'jszip';
// @ts-ignore
import cosSimilarity from 'cos-similarity';
export class Pose {
    constructor() {
        this.poses = [];
        this.isFinalized = false;
        this.videoMetadata = {
            name: '',
            width: 0,
            height: 0,
            duration: 0,
        };
    }
    getVideoName() {
        return this.videoMetadata.name;
    }
    setVideoName(videoName) {
        this.videoMetadata.name = videoName;
    }
    setVideoMetaData(width, height, duration) {
        this.videoMetadata.width = width;
        this.videoMetadata.height = height;
        this.videoMetadata.duration = duration;
    }
    getNumberOfPoses() {
        if (this.poses === undefined)
            return -1;
        return this.poses.length;
    }
    getPoses() {
        if (this.poses === undefined)
            return [];
        return this.poses;
    }
    pushPose(videoTimeMiliseconds, frameImageJpegDataUrl, videoWidth, videoHeight, videoDuration, results) {
        this.setVideoMetaData(videoWidth, videoHeight, videoDuration);
        if (results.poseLandmarks === undefined)
            return;
        const poseLandmarksWithWorldCoordinate = results.ea
            ? results.ea
            : [];
        if (poseLandmarksWithWorldCoordinate.length === 0) {
            console.warn(`[Pose] pushPose - Could not get the pose with the world coordinate`, results);
            return;
        }
        const poseVector = Pose.getPoseVector(poseLandmarksWithWorldCoordinate);
        if (!poseVector) {
            console.warn(`[Pose] pushPose - Could not get the pose vector`, poseLandmarksWithWorldCoordinate);
            return;
        }
        const pose = {
            t: videoTimeMiliseconds,
            pose: poseLandmarksWithWorldCoordinate.map((landmark) => {
                return [landmark.x, landmark.y, landmark.z, landmark.visibility];
            }),
            vectors: poseVector,
            frameImageDataUrl: frameImageJpegDataUrl,
        };
        if (1 <= this.poses.length) {
            const lastPose = this.poses[this.poses.length - 1];
            if (Pose.isSimilarPose(lastPose.vectors, pose.vectors)) {
                return;
            }
        }
        this.poses.push(pose);
    }
    finalize() {
        if (Pose.IS_ENABLE_DUPLICATED_POSE_REDUCTION) {
            // 全ポーズを走査して、類似するポーズを削除する
            const newPoses = [];
            for (const poseA of this.poses) {
                let isDuplicated = false;
                for (const poseB of newPoses) {
                    if (Pose.isSimilarPose(poseA.vectors, poseB.vectors)) {
                        isDuplicated = true;
                        break;
                    }
                }
                if (isDuplicated)
                    continue;
                newPoses.push(poseA);
            }
            console.info(`[Pose] getJson - Reduced ${this.poses.length} poses -> ${newPoses.length} poses`);
            this.poses = newPoses;
        }
        this.isFinalized = true;
    }
    getSimilarPoses(results) {
        const poseVector = Pose.getPoseVector(results.ea);
        if (!poseVector)
            throw 'Could not get the pose vector';
        return this.poses.filter((p) => Pose.isSimilarPose(p.vectors, poseVector));
    }
    static getPoseVector(poseLandmarks) {
        return {
            rightWristToRightElbow: [
                poseLandmarks[POSE_LANDMARKS.RIGHT_WRIST].x -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].x,
                poseLandmarks[POSE_LANDMARKS.RIGHT_WRIST].y -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].y,
                poseLandmarks[POSE_LANDMARKS.RIGHT_WRIST].z -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].z,
            ],
            rightElbowToRightShoulder: [
                poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].x -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_SHOULDER].x,
                poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].y -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_SHOULDER].y,
                poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW].z -
                    poseLandmarks[POSE_LANDMARKS.RIGHT_SHOULDER].z,
            ],
            leftWristToLeftElbow: [
                poseLandmarks[POSE_LANDMARKS.LEFT_WRIST].x -
                    poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].x,
                poseLandmarks[POSE_LANDMARKS.LEFT_WRIST].y -
                    poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].y,
                poseLandmarks[POSE_LANDMARKS.LEFT_WRIST].z -
                    poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].z,
            ],
            leftElbowToLeftShoulder: [
                poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].x -
                    poseLandmarks[POSE_LANDMARKS.LEFT_SHOULDER].x,
                poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].y -
                    poseLandmarks[POSE_LANDMARKS.LEFT_SHOULDER].y,
                poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW].z -
                    poseLandmarks[POSE_LANDMARKS.LEFT_SHOULDER].z,
            ],
        };
    }
    static isSimilarPose(poseVectorA, poseVectorB, threshold = 0.9) {
        const cosSimilarities = {
            leftWristToLeftElbow: cosSimilarity(poseVectorA.leftWristToLeftElbow, poseVectorB.leftWristToLeftElbow),
            leftElbowToLeftShoulder: cosSimilarity(poseVectorA.leftElbowToLeftShoulder, poseVectorB.leftElbowToLeftShoulder),
            rightWristToRightElbow: cosSimilarity(poseVectorA.rightWristToRightElbow, poseVectorB.rightWristToRightElbow),
            rightElbowToRightShoulder: cosSimilarity(poseVectorA.rightElbowToRightShoulder, poseVectorB.rightElbowToRightShoulder),
        };
        let isSimilar = false;
        const cosSimilaritiesSum = Object.values(cosSimilarities).reduce((sum, value) => sum + value, 0);
        if (cosSimilaritiesSum >= threshold * Object.keys(cosSimilarities).length)
            isSimilar = true;
        console.log(`[Pose] isSimilarPose`, isSimilar, cosSimilarities);
        return isSimilar;
    }
    async getZip() {
        const jsZip = new JSZip();
        jsZip.file('poses.json', this.getJson());
        for (const pose of this.poses) {
            if (!pose.frameImageDataUrl)
                continue;
            try {
                const index = pose.frameImageDataUrl.indexOf('base64,') + 'base64,'.length;
                const base64 = pose.frameImageDataUrl.substring(index);
                jsZip.file(`snapshot-${pose.t}.jpg`, base64, { base64: true });
            }
            catch (error) {
                console.warn(`[PoseExporterService] push - Could not push frame image`, error);
                throw error;
            }
        }
        return await jsZip.generateAsync({ type: 'blob' });
    }
    getJson() {
        if (this.videoMetadata === undefined || this.poses === undefined)
            return '{}';
        if (!this.isFinalized) {
            this.finalize();
        }
        let poseLandmarkMappings = [];
        for (const key of Object.keys(POSE_LANDMARKS)) {
            const index = POSE_LANDMARKS[key];
            poseLandmarkMappings[index] = key;
        }
        const json = {
            generator: 'mp-video-pose-extractor',
            version: 1,
            video: this.videoMetadata,
            poses: this.poses.map((pose) => {
                const poseVector = [];
                for (const key of Pose.POSE_VECTOR_MAPPINGS) {
                    poseVector.push(pose.vectors[key]);
                }
                return {
                    t: pose.t,
                    pose: Pose.IS_SHRINK_RAW_POSE_DATA ? [] : pose.pose,
                    vectors: poseVector,
                };
            }),
            poseLandmarkMapppings: Pose.IS_SHRINK_RAW_POSE_DATA
                ? []
                : poseLandmarkMappings,
        };
        return JSON.stringify(json);
    }
    loadJson(json) {
        const parsedJson = JSON.parse(json);
        if (parsedJson.generator !== 'mp-video-pose-extractor') {
            throw '不正なファイル';
        }
        else if (parsedJson.version !== 1) {
            throw '未対応のバージョン';
        }
        this.videoMetadata = parsedJson.video;
        this.poses = parsedJson.poses.map((poseJsonItem) => {
            const poseVector = {};
            Pose.POSE_VECTOR_MAPPINGS.map((key, index) => {
                poseVector[key] = poseJsonItem.vectors[index];
            });
            return {
                t: poseJsonItem.t,
                pose: poseJsonItem.pose,
                vectors: poseVector,
                frameImageDataUrl: undefined,
            };
        });
    }
    async loadZip(buffer, includeImages = true) {
        const jsZip = new JSZip();
        const zip = await jsZip.loadAsync(buffer, { base64: false });
        if (!zip)
            throw 'ZIPファイルを読み込めませんでした';
        const json = await zip.file('poses.json')?.async('text');
        if (json === undefined) {
            throw 'ZIPファイルに pose.json が含まれていません';
        }
        this.loadJson(json);
        if (includeImages) {
            for (const pose of this.poses) {
                const frameImageFileName = `snapshot-${pose.t}.jpg`;
                const imageBase64 = await zip.file(frameImageFileName)?.async('base64');
                if (imageBase64 === undefined && !pose.frameImageDataUrl) {
                    continue;
                }
                pose.frameImageDataUrl = `data:image/jpeg;base64,${imageBase64}`;
            }
        }
    }
}
Pose.IS_ENABLE_DUPLICATED_POSE_REDUCTION = true;
Pose.IS_SHRINK_RAW_POSE_DATA = false;
Pose.POSE_VECTOR_MAPPINGS = [
    'rightWristToRightElbow',
    'rightElbowToRightShoulder',
    'leftWristToLeftElbow',
    'leftElbowToLeftShoulder',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tcC1wb3NlLWV4dHJhY3Rvci9zcmMvbGliL2NsYXNzZXMvcG9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFXLE1BQU0scUJBQXFCLENBQUM7QUFDOUQsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFNL0IsYUFBYTtBQUNiLE9BQU8sYUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE1BQU0sT0FBTyxJQUFJO0lBdUJmO1FBZE8sVUFBSyxHQUFlLEVBQUUsQ0FBQztRQUN2QixnQkFBVyxHQUFhLEtBQUssQ0FBQztRQWNuQyxJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLEVBQUUsQ0FBQztZQUNULFFBQVEsRUFBRSxDQUFDO1NBQ1osQ0FBQztJQUNKLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQsWUFBWSxDQUFDLFNBQWlCO1FBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxRQUFnQjtRQUM5RCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVM7WUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxD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aUJBQ1Y7Z0JBRUQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLDBCQUEwQixXQUFXLEVBQUUsQ0FBQzthQUNsRTtTQUNGO0lBQ0gsQ0FBQzs7QUE1VHNCLHdDQUFtQyxHQUFHLElBQUksQ0FBQztBQUUzQyw0QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFFaEMseUJBQW9CLEdBQUc7SUFDNUMsd0JBQXdCO0lBQ3hCLDJCQUEyQjtJQUMzQixzQkFBc0I7SUFDdEIseUJBQXlCO0NBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQT1NFX0xBTkRNQVJLUywgUmVzdWx0cyB9IGZyb20gJ0BtZWRpYXBpcGUvaG9saXN0aWMnO1xuaW1wb3J0ICogYXMgSlNaaXAgZnJvbSAnanN6aXAnO1xuaW1wb3J0IHsgUG9zZUl0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3Bvc2UtaXRlbSc7XG5pbXBvcnQgeyBQb3NlSnNvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG9zZS1qc29uJztcbmltcG9ydCB7IFBvc2VKc29uSXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG9zZS1qc29uLWl0ZW0nO1xuaW1wb3J0IHsgUG9zZVZlY3RvciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG9zZS12ZWN0b3InO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgY29zU2ltaWxhcml0eSBmcm9tICdjb3Mtc2ltaWxhcml0eSc7XG5cbmV4cG9ydCBjbGFzcyBQb3NlIHtcbiAgcHVibGljIGdlbmVyYXRvcj86IHN0cmluZztcbiAgcHVibGljIHZlcnNpb24/OiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9NZXRhZGF0YSE6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICB9O1xuICBwdWJsaWMgcG9zZXM6IFBvc2VJdGVtW10gPSBbXTtcbiAgcHVibGljIGlzRmluYWxpemVkPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVNfRU5BQkxFX0RVUExJQ0FURURfUE9TRV9SRURVQ1RJT04gPSB0cnVlO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVNfU0hSSU5LX1JBV19QT1NFX0RBVEEgPSBmYWxzZTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBPU0VfVkVDVE9SX01BUFBJTkdTID0gW1xuICAgICdyaWdodFdyaXN0VG9SaWdodEVsYm93JyxcbiAgICAncmlnaHRFbGJvd1RvUmlnaHRTaG91bGRlcicsXG4gICAgJ2xlZnRXcmlzdFRvTGVmdEVsYm93JyxcbiAgICAnbGVmdEVsYm93VG9MZWZ0U2hvdWxkZXInLFxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmlkZW9NZXRhZGF0YSA9IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0VmlkZW9OYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnZpZGVvTWV0YWRhdGEubmFtZTtcbiAgfVxuXG4gIHNldFZpZGVvTmFtZSh2aWRlb05hbWU6IHN0cmluZykge1xuICAgIHRoaXMudmlkZW9NZXRhZGF0YS5uYW1lID0gdmlkZW9OYW1lO1xuICB9XG5cbiAgc2V0VmlkZW9NZXRhRGF0YSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZHVyYXRpb246IG51bWJlcikge1xuICAgIHRoaXMudmlkZW9NZXRhZGF0YS53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMudmlkZW9NZXRhZGF0YS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy52aWRlb01ldGFkYXRhLmR1cmF0aW9uID0gZHVyYXRpb247XG4gIH1cblxuICBnZXROdW1iZXJPZlBvc2VzKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMucG9zZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgIHJldHVybiB0aGlzLnBvc2VzLmxlbmd0aDtcbiAgfVxuXG4gIGdldFBvc2VzKCk6IFBvc2VJdGVtW10ge1xuICAgIGlmICh0aGlzLnBvc2VzID09PSB1bmRlZmluZWQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gdGhpcy5wb3NlcztcbiAgfVxuXG4gIHB1c2hQb3NlKFxuICAgIHZpZGVvVGltZU1pbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgZnJhbWVJbWFnZUpwZWdEYXRhVXJsOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgdmlkZW9XaWR0aDogbnVtYmVyLFxuICAgIHZpZGVvSGVpZ2h0OiBudW1iZXIsXG4gICAgdmlkZW9EdXJhdGlvbjogbnVtYmVyLFxuICAgIHJlc3VsdHM6IFJlc3VsdHNcbiAgKSB7XG4gICAgdGhpcy5zZXRWaWRlb01ldGFEYXRhKHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb0R1cmF0aW9uKTtcblxuICAgIGlmIChyZXN1bHRzLnBvc2VMYW5kbWFya3MgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcG9zZUxhbmRtYXJrc1dpdGhXb3JsZENvb3JkaW5hdGU6IGFueVtdID0gKHJlc3VsdHMgYXMgYW55KS5lYVxuICAgICAgPyAocmVzdWx0cyBhcyBhbnkpLmVhXG4gICAgICA6IFtdO1xuICAgIGlmIChwb3NlTGFuZG1hcmtzV2l0aFdvcmxkQ29vcmRpbmF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtQb3NlXSBwdXNoUG9zZSAtIENvdWxkIG5vdCBnZXQgdGhlIHBvc2Ugd2l0aCB0aGUgd29ybGQgY29vcmRpbmF0ZWAsXG4gICAgICAgIHJlc3VsdHNcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zZVZlY3RvciA9IFBvc2UuZ2V0UG9zZVZlY3Rvcihwb3NlTGFuZG1hcmtzV2l0aFdvcmxkQ29vcmRpbmF0ZSk7XG4gICAgaWYgKCFwb3NlVmVjdG9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbUG9zZV0gcHVzaFBvc2UgLSBDb3VsZCBub3QgZ2V0IHRoZSBwb3NlIHZlY3RvcmAsXG4gICAgICAgIHBvc2VMYW5kbWFya3NXaXRoV29ybGRDb29yZGluYXRlXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2U6IFBvc2VJdGVtID0ge1xuICAgICAgdDogdmlkZW9UaW1lTWlsaXNlY29uZHMsXG4gICAgICBwb3NlOiBwb3NlTGFuZG1hcmtzV2l0aFdvcmxkQ29vcmRpbmF0ZS5tYXAoKGxhbmRtYXJrKSA9PiB7XG4gICAgICAgIHJldHVybiBbbGFuZG1hcmsueCwgbGFuZG1hcmsueSwgbGFuZG1hcmsueiwgbGFuZG1hcmsudmlzaWJpbGl0eV07XG4gICAgICB9KSxcbiAgICAgIHZlY3RvcnM6IHBvc2VWZWN0b3IsXG4gICAgICBmcmFtZUltYWdlRGF0YVVybDogZnJhbWVJbWFnZUpwZWdEYXRhVXJsLFxuICAgIH07XG5cbiAgICBpZiAoMSA8PSB0aGlzLnBvc2VzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGFzdFBvc2UgPSB0aGlzLnBvc2VzW3RoaXMucG9zZXMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoUG9zZS5pc1NpbWlsYXJQb3NlKGxhc3RQb3NlLnZlY3RvcnMsIHBvc2UudmVjdG9ycykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucG9zZXMucHVzaChwb3NlKTtcbiAgfVxuXG4gIGZpbmFsaXplKCkge1xuICAgIGlmIChQb3NlLklTX0VOQUJMRV9EVVBMSUNBVEVEX1BPU0VfUkVEVUNUSU9OKSB7XG4gICAgICAvLyDlhajjg53jg7zjgrrjgpLotbDmn7vjgZfjgabjgIHpoZ7kvLzjgZnjgovjg53jg7zjgrrjgpLliYrpmaTjgZnjgotcbiAgICAgIGNvbnN0IG5ld1Bvc2VzOiBQb3NlSXRlbVtdID0gW107XG4gICAgICBmb3IgKGNvbnN0IHBvc2VBIG9mIHRoaXMucG9zZXMpIHtcbiAgICAgICAgbGV0IGlzRHVwbGljYXRlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHBvc2VCIG9mIG5ld1Bvc2VzKSB7XG4gICAgICAgICAgaWYgKFBvc2UuaXNTaW1pbGFyUG9zZShwb3NlQS52ZWN0b3JzLCBwb3NlQi52ZWN0b3JzKSkge1xuICAgICAgICAgICAgaXNEdXBsaWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEdXBsaWNhdGVkKSBjb250aW51ZTtcblxuICAgICAgICBuZXdQb3Nlcy5wdXNoKHBvc2VBKTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICBgW1Bvc2VdIGdldEpzb24gLSBSZWR1Y2VkICR7dGhpcy5wb3Nlcy5sZW5ndGh9IHBvc2VzIC0+ICR7bmV3UG9zZXMubGVuZ3RofSBwb3Nlc2BcbiAgICAgICk7XG4gICAgICB0aGlzLnBvc2VzID0gbmV3UG9zZXM7XG4gICAgfVxuXG4gICAgdGhpcy5pc0ZpbmFsaXplZCA9IHRydWU7XG4gIH1cblxuICBnZXRTaW1pbGFyUG9zZXMocmVzdWx0czogUmVzdWx0cyk6IFBvc2VJdGVtW10ge1xuICAgIGNvbnN0IHBvc2VWZWN0b3IgPSBQb3NlLmdldFBvc2VWZWN0b3IoKHJlc3VsdHMgYXMgYW55KS5lYSk7XG4gICAgaWYgKCFwb3NlVmVjdG9yKSB0aHJvdyAnQ291bGQgbm90IGdldCB0aGUgcG9zZSB2ZWN0b3InO1xuXG4gICAgcmV0dXJuIHRoaXMucG9zZXMuZmlsdGVyKChwKSA9PiBQb3NlLmlzU2ltaWxhclBvc2UocC52ZWN0b3JzLCBwb3NlVmVjdG9yKSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0UG9zZVZlY3RvcihcbiAgICBwb3NlTGFuZG1hcmtzOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6OiBudW1iZXIgfVtdXG4gICk6IFBvc2VWZWN0b3IgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB7XG4gICAgICByaWdodFdyaXN0VG9SaWdodEVsYm93OiBbXG4gICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfV1JJU1RdLnggLVxuICAgICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfRUxCT1ddLngsXG4gICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfV1JJU1RdLnkgLVxuICAgICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfRUxCT1ddLnksXG4gICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfV1JJU1RdLnogLVxuICAgICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuUklHSFRfRUxCT1ddLnosXG4gICAgICBdLFxuICAgICAgcmlnaHRFbGJvd1RvUmlnaHRTaG91bGRlcjogW1xuICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX0VMQk9XXS54IC1cbiAgICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX1NIT1VMREVSXS54LFxuICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX0VMQk9XXS55IC1cbiAgICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX1NIT1VMREVSXS55LFxuICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX0VMQk9XXS56IC1cbiAgICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLlJJR0hUX1NIT1VMREVSXS56LFxuICAgICAgXSxcbiAgICAgIGxlZnRXcmlzdFRvTGVmdEVsYm93OiBbXG4gICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuTEVGVF9XUklTVF0ueCAtXG4gICAgICAgICAgcG9zZUxhbmRtYXJrc1tQT1NFX0xBTkRNQVJLUy5MRUZUX0VMQk9XXS54LFxuICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLkxFRlRfV1JJU1RdLnkgLVxuICAgICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuTEVGVF9FTEJPV10ueSxcbiAgICAgICAgcG9zZUxhbmRtYXJrc1tQT1NFX0xBTkRNQVJLUy5MRUZUX1dSSVNUXS56IC1cbiAgICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLkxFRlRfRUxCT1ddLnosXG4gICAgICBdLFxuICAgICAgbGVmdEVsYm93VG9MZWZ0U2hvdWxkZXI6IFtcbiAgICAgICAgcG9zZUxhbmRtYXJrc1tQT1NFX0xBTkRNQVJLUy5MRUZUX0VMQk9XXS54IC1cbiAgICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLkxFRlRfU0hPVUxERVJdLngsXG4gICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuTEVGVF9FTEJPV10ueSAtXG4gICAgICAgICAgcG9zZUxhbmRtYXJrc1tQT1NFX0xBTkRNQVJLUy5MRUZUX1NIT1VMREVSXS55LFxuICAgICAgICBwb3NlTGFuZG1hcmtzW1BPU0VfTEFORE1BUktTLkxFRlRfRUxCT1ddLnogLVxuICAgICAgICAgIHBvc2VMYW5kbWFya3NbUE9TRV9MQU5ETUFSS1MuTEVGVF9TSE9VTERFUl0ueixcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBpc1NpbWlsYXJQb3NlKFxuICAgIHBvc2VWZWN0b3JBOiBQb3NlVmVjdG9yLFxuICAgIHBvc2VWZWN0b3JCOiBQb3NlVmVjdG9yLFxuICAgIHRocmVzaG9sZCA9IDAuOVxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBjb3NTaW1pbGFyaXRpZXMgPSB7XG4gICAgICBsZWZ0V3Jpc3RUb0xlZnRFbGJvdzogY29zU2ltaWxhcml0eShcbiAgICAgICAgcG9zZVZlY3RvckEubGVmdFdyaXN0VG9MZWZ0RWxib3csXG4gICAgICAgIHBvc2VWZWN0b3JCLmxlZnRXcmlzdFRvTGVmdEVsYm93XG4gICAgICApLFxuICAgICAgbGVmdEVsYm93VG9MZWZ0U2hvdWxkZXI6IGNvc1NpbWlsYXJpdHkoXG4gICAgICAgIHBvc2VWZWN0b3JBLmxlZnRFbGJvd1RvTGVmdFNob3VsZGVyLFxuICAgICAgICBwb3NlVmVjdG9yQi5sZWZ0RWxib3dUb0xlZnRTaG91bGRlclxuICAgICAgKSxcbiAgICAgIHJpZ2h0V3Jpc3RUb1JpZ2h0RWxib3c6IGNvc1NpbWlsYXJpdHkoXG4gICAgICAgIHBvc2VWZWN0b3JBLnJpZ2h0V3Jpc3RUb1JpZ2h0RWxib3csXG4gICAgICAgIHBvc2VWZWN0b3JCLnJpZ2h0V3Jpc3RUb1JpZ2h0RWxib3dcbiAgICAgICksXG4gICAgICByaWdodEVsYm93VG9SaWdodFNob3VsZGVyOiBjb3NTaW1pbGFyaXR5KFxuICAgICAgICBwb3NlVmVjdG9yQS5yaWdodEVsYm93VG9SaWdodFNob3VsZGVyLFxuICAgICAgICBwb3NlVmVjdG9yQi5yaWdodEVsYm93VG9SaWdodFNob3VsZGVyXG4gICAgICApLFxuICAgIH07XG5cbiAgICBsZXQgaXNTaW1pbGFyID0gZmFsc2U7XG4gICAgY29uc3QgY29zU2ltaWxhcml0aWVzU3VtID0gT2JqZWN0LnZhbHVlcyhjb3NTaW1pbGFyaXRpZXMpLnJlZHVjZShcbiAgICAgIChzdW0sIHZhbHVlKSA9PiBzdW0gKyB2YWx1ZSxcbiAgICAgIDBcbiAgICApO1xuICAgIGlmIChjb3NTaW1pbGFyaXRpZXNTdW0gPj0gdGhyZXNob2xkICogT2JqZWN0LmtleXMoY29zU2ltaWxhcml0aWVzKS5sZW5ndGgpXG4gICAgICBpc1NpbWlsYXIgPSB0cnVlO1xuXG4gICAgY29uc29sZS5sb2coYFtQb3NlXSBpc1NpbWlsYXJQb3NlYCwgaXNTaW1pbGFyLCBjb3NTaW1pbGFyaXRpZXMpO1xuXG4gICAgcmV0dXJuIGlzU2ltaWxhcjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRaaXAoKTogUHJvbWlzZTxCbG9iPiB7XG4gICAgY29uc3QganNaaXAgPSBuZXcgSlNaaXAoKTtcbiAgICBqc1ppcC5maWxlKCdwb3Nlcy5qc29uJywgdGhpcy5nZXRKc29uKCkpO1xuXG4gICAgZm9yIChjb25zdCBwb3NlIG9mIHRoaXMucG9zZXMpIHtcbiAgICAgIGlmICghcG9zZS5mcmFtZUltYWdlRGF0YVVybCkgY29udGludWU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmRleCA9XG4gICAgICAgICAgcG9zZS5mcmFtZUltYWdlRGF0YVVybC5pbmRleE9mKCdiYXNlNjQsJykgKyAnYmFzZTY0LCcubGVuZ3RoO1xuICAgICAgICBjb25zdCBiYXNlNjQgPSBwb3NlLmZyYW1lSW1hZ2VEYXRhVXJsLnN1YnN0cmluZyhpbmRleCk7XG5cbiAgICAgICAganNaaXAuZmlsZShgc25hcHNob3QtJHtwb3NlLnR9LmpwZ2AsIGJhc2U2NCwgeyBiYXNlNjQ6IHRydWUgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtQb3NlRXhwb3J0ZXJTZXJ2aWNlXSBwdXNoIC0gQ291bGQgbm90IHB1c2ggZnJhbWUgaW1hZ2VgLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBqc1ppcC5nZW5lcmF0ZUFzeW5jKHsgdHlwZTogJ2Jsb2InIH0pO1xuICB9XG5cbiAgcHVibGljIGdldEpzb24oKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy52aWRlb01ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgdGhpcy5wb3NlcyA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuICd7fSc7XG5cbiAgICBpZiAoIXRoaXMuaXNGaW5hbGl6ZWQpIHtcbiAgICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICB9XG5cbiAgICBsZXQgcG9zZUxhbmRtYXJrTWFwcGluZ3MgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhQT1NFX0xBTkRNQVJLUykpIHtcbiAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBQT1NFX0xBTkRNQVJLU1trZXkgYXMga2V5b2YgdHlwZW9mIFBPU0VfTEFORE1BUktTXTtcbiAgICAgIHBvc2VMYW5kbWFya01hcHBpbmdzW2luZGV4XSA9IGtleTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uOiBQb3NlSnNvbiA9IHtcbiAgICAgIGdlbmVyYXRvcjogJ21wLXZpZGVvLXBvc2UtZXh0cmFjdG9yJyxcbiAgICAgIHZlcnNpb246IDEsXG4gICAgICB2aWRlbzogdGhpcy52aWRlb01ldGFkYXRhISxcbiAgICAgIHBvc2VzOiB0aGlzLnBvc2VzLm1hcCgocG9zZTogUG9zZUl0ZW0pOiBQb3NlSnNvbkl0ZW0gPT4ge1xuICAgICAgICBjb25zdCBwb3NlVmVjdG9yID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIFBvc2UuUE9TRV9WRUNUT1JfTUFQUElOR1MpIHtcbiAgICAgICAgICBwb3NlVmVjdG9yLnB1c2gocG9zZS52ZWN0b3JzW2tleSBhcyBrZXlvZiBQb3NlVmVjdG9yXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHQ6IHBvc2UudCxcbiAgICAgICAgICBwb3NlOiBQb3NlLklTX1NIUklOS19SQVdfUE9TRV9EQVRBID8gW10gOiBwb3NlLnBvc2UsXG4gICAgICAgICAgdmVjdG9yczogcG9zZVZlY3RvcixcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgcG9zZUxhbmRtYXJrTWFwcHBpbmdzOiBQb3NlLklTX1NIUklOS19SQVdfUE9TRV9EQVRBXG4gICAgICAgID8gW11cbiAgICAgICAgOiBwb3NlTGFuZG1hcmtNYXBwaW5ncyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb24pO1xuICB9XG5cbiAgbG9hZEpzb24oanNvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2UoanNvbik7XG5cbiAgICBpZiAocGFyc2VkSnNvbi5nZW5lcmF0b3IgIT09ICdtcC12aWRlby1wb3NlLWV4dHJhY3RvcicpIHtcbiAgICAgIHRocm93ICfkuI3mraPjgarjg5XjgqHjgqTjg6snO1xuICAgIH0gZWxzZSBpZiAocGFyc2VkSnNvbi52ZXJzaW9uICE9PSAxKSB7XG4gICAgICB0aHJvdyAn5pyq5a++5b+c44Gu44OQ44O844K444On44OzJztcbiAgICB9XG5cbiAgICB0aGlzLnZpZGVvTWV0YWRhdGEgPSBwYXJzZWRKc29uLnZpZGVvO1xuICAgIHRoaXMucG9zZXMgPSBwYXJzZWRKc29uLnBvc2VzLm1hcChcbiAgICAgIChwb3NlSnNvbkl0ZW06IFBvc2VKc29uSXRlbSk6IFBvc2VJdGVtID0+IHtcbiAgICAgICAgY29uc3QgcG9zZVZlY3RvcjogYW55ID0ge307XG4gICAgICAgIFBvc2UuUE9TRV9WRUNUT1JfTUFQUElOR1MubWFwKChrZXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgcG9zZVZlY3RvcltrZXkgYXMga2V5b2YgUG9zZVZlY3Rvcl0gPSBwb3NlSnNvbkl0ZW0udmVjdG9yc1tpbmRleF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdDogcG9zZUpzb25JdGVtLnQsXG4gICAgICAgICAgcG9zZTogcG9zZUpzb25JdGVtLnBvc2UsXG4gICAgICAgICAgdmVjdG9yczogcG9zZVZlY3RvcixcbiAgICAgICAgICBmcmFtZUltYWdlRGF0YVVybDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBhc3luYyBsb2FkWmlwKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIGluY2x1ZGVJbWFnZXM6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgY29uc3QganNaaXAgPSBuZXcgSlNaaXAoKTtcbiAgICBjb25zdCB6aXAgPSBhd2FpdCBqc1ppcC5sb2FkQXN5bmMoYnVmZmVyLCB7IGJhc2U2NDogZmFsc2UgfSk7XG4gICAgaWYgKCF6aXApIHRocm93ICdaSVDjg5XjgqHjgqTjg6vjgpLoqq3jgb/ovrzjgoHjgb7jgZvjgpPjgafjgZfjgZ8nO1xuXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHppcC5maWxlKCdwb3Nlcy5qc29uJyk/LmFzeW5jKCd0ZXh0Jyk7XG4gICAgaWYgKGpzb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgJ1pJUOODleOCoeOCpOODq+OBqyBwb3NlLmpzb24g44GM5ZCr44G+44KM44Gm44GE44G+44Gb44KTJztcbiAgICB9XG5cbiAgICB0aGlzLmxvYWRKc29uKGpzb24pO1xuXG4gICAgaWYgKGluY2x1ZGVJbWFnZXMpIHtcbiAgICAgIGZvciAoY29uc3QgcG9zZSBvZiB0aGlzLnBvc2VzKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lSW1hZ2VGaWxlTmFtZSA9IGBzbmFwc2hvdC0ke3Bvc2UudH0uanBnYDtcbiAgICAgICAgY29uc3QgaW1hZ2VCYXNlNjQgPSBhd2FpdCB6aXAuZmlsZShmcmFtZUltYWdlRmlsZU5hbWUpPy5hc3luYygnYmFzZTY0Jyk7XG4gICAgICAgIGlmIChpbWFnZUJhc2U2NCA9PT0gdW5kZWZpbmVkICYmICFwb3NlLmZyYW1lSW1hZ2VEYXRhVXJsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NlLmZyYW1lSW1hZ2VEYXRhVXJsID0gYGRhdGE6aW1hZ2UvanBlZztiYXNlNjQsJHtpbWFnZUJhc2U2NH1gO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19